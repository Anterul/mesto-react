{"ast":null,"code":"class Api {\n  constructor(_ref) {\n    let {\n      baseUrl,\n      headers\n    } = _ref;\n    this._baseUrl = baseUrl;\n    this.authorization = headers.authorization;\n  }\n  _getResponseData(res) {\n    if (!res.ok) {\n      return Promise.reject(`Ошибка: ${res.status}`);\n    }\n    return res.json();\n  }\n  getUserInfo(url) {\n    return fetch(url, {\n      method: 'GET',\n      headers: {\n        authorization: this.authorization\n      }\n    }).then(this._getResponseData);\n  }\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'GET',\n      headers: {\n        authorization: this.authorization\n      }\n    }).then(this._getResponseData);\n  }\n  submitProfileData(name, about) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this.authorization,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    }).then(this._getResponseData);\n  }\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this.authorization\n      }\n    }).then(this._getResponseData);\n  }\n  addNewCard(name, link) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this.authorization,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    }).then(this._getResponseData);\n  }\n  likeCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: 'PUT',\n      headers: {\n        authorization: this.authorization\n      }\n    }).then(this._getResponseData);\n  }\n  dislikeCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this.authorization\n      }\n    }).then(this._getResponseData);\n  }\n  updateAvatar(avatarUrl) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this.authorization,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: avatarUrl\n      })\n    }).then(this._getResponseData);\n  }\n  changeLikeCardStatus(id, isLiked) {\n    if (isLiked) {\n      return this.likeCard(id);\n    } else {\n      return this.dislikeCard(id);\n    }\n  }\n}\nconst api = new Api({\n  baseUrl: `https://mesto.nomoreparties.co/v1/cohort-57`,\n  headers: {\n    authorization: 'cc8211c2-a478-4e6c-819c-a7ec6fb1096c'\n  }\n});\nexport default api;","map":{"version":3,"names":["Api","constructor","baseUrl","headers","_baseUrl","authorization","_getResponseData","res","ok","Promise","reject","status","json","getUserInfo","url","fetch","method","then","getInitialCards","submitProfileData","name","about","body","JSON","stringify","deleteCard","id","addNewCard","link","likeCard","dislikeCard","updateAvatar","avatarUrl","avatar","changeLikeCardStatus","isLiked","api"],"sources":["/home/anteru/dev/12/src/utils/Api.js"],"sourcesContent":["class Api {\n  constructor({baseUrl, headers}) {\n    this._baseUrl = baseUrl;\n    this.authorization = headers.authorization;\n  }\n  \n  _getResponseData(res) {\n    if (!res.ok) {\n      return Promise.reject(`Ошибка: ${res.status}`); \n    }\n    return res.json();\n  }\n\n  getUserInfo(url) {\n    return fetch(url, {\n      method: 'GET',\n      headers: {\n        authorization: this.authorization,\n      }\n    })\n    .then(this._getResponseData)\n  }\n\n  getInitialCards() {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'GET',\n      headers: {\n        authorization: this.authorization,\n      }\n    })\n    .then(this._getResponseData)\n  }\n\n  submitProfileData(name, about) {\n    return fetch(`${this._baseUrl}/users/me`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this.authorization,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        about: about\n      })\n    })\n    .then(this._getResponseData)\n  }\n\n  deleteCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this.authorization,\n      },\n    })\n    .then(this._getResponseData)\n  }\n\n  addNewCard(name, link) {\n    return fetch(`${this._baseUrl}/cards`, {\n      method: 'POST',\n      headers: {\n        authorization: this.authorization,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        name: name,\n        link: link\n      })\n    })\n    .then(this._getResponseData)\n  }\n\n  likeCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: 'PUT',\n      headers: {\n        authorization: this.authorization,\n      },\n    })\n    .then(this._getResponseData)\n  }\n\n  dislikeCard(id) {\n    return fetch(`${this._baseUrl}/cards/${id}/likes`, {\n      method: 'DELETE',\n      headers: {\n        authorization: this.authorization,\n      },\n    })\n    .then(this._getResponseData)\n  }\n\n  updateAvatar(avatarUrl) {\n    return fetch(`${this._baseUrl}/users/me/avatar`, {\n      method: 'PATCH',\n      headers: {\n        authorization: this.authorization,\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        avatar: avatarUrl\n      })\n    })\n    .then(this._getResponseData)\n  }\n\n  changeLikeCardStatus(id, isLiked) {\n    if (isLiked) {\n      return this.likeCard(id);\n    } else {\n      return this.dislikeCard(id)\n    }\n  }\n\n}\n\nconst api = new Api({\n  baseUrl: `https://mesto.nomoreparties.co/v1/cohort-57`,\n  headers: {\n    authorization: 'cc8211c2-a478-4e6c-819c-a7ec6fb1096c'\n  }\n});\n\nexport default api;"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}